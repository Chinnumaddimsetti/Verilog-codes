////////////////////////////////////////////////////////////////////////////    up/down counter /////////////////////////////////////////////////////////////////


***************************************************************************     RTL CODE      ********************************************************************


module counter(
    input clk,
    input rst,
    input load,
    input en,
    input [3:0] data_in,
    output reg [3:0] data_out
);
    always @(posedge clk) begin
        if (rst)
            data_out <= 4'b0000;
        else if (load)
            data_out <= data_in;
        else if (en) begin
            if (data_out == 4'b1111)
                data_out <= 4'b0000;
            else
                data_out <= data_out + 1'b1;
        end else begin
            if (data_out == 4'b0000)
                data_out <= 4'b1111;
            else
                data_out <= data_out - 1'b1;
        end
    end
endmodule


***********************************************************************      TB CODE       *********************************************************************************

module tb;
    reg clk, rst, load, en;
    reg [3:0] data_in;
    wire [3:0] data_out;

    counter DUT(clk, rst, load, en, data_in, data_out);

    initial begin
        clk = 0;
        forever #5 clk = ~clk;
    end

    task initialize;
        begin
            rst = 0;
            load = 0;
            en = 0;
            data_in = 4'b0000;
        end
    endtask

    task reset;
        begin 
            @(negedge clk)
                rst = 1;
            @(negedge clk)
                rst = 0;
        end
    endtask

    initial begin 
        initialize;
        reset;
        load = 1;
        data_in = 4'b0101;
        @(negedge clk)
        load = 0;
        en = 1;
        #100;
        en = 0;
        #100;
        $finish;
    end
endmodule
